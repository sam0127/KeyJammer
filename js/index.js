(()=>{let oscilloscopeInit=(canvasOscElement,canvasSpectElement,source)=>{let atNode=(first,tolerance=0)=>128-tolerance<=first&&first<=128+tolerance;let canvasOsc=canvasOscElement.getContext("2d"),heightOsc=canvasOscElement.height,widthOsc=canvasOscElement.width,dataArrayOsc=(source.fftSize=16384,new Uint8Array(8192)),canvasSpect=(canvasOsc.fillStyle="rgb(255,255,255)",canvasOsc.lineWidth=1,canvasOsc.strokeStyle="rgb(0,0,0)",canvasSpectElement.getContext("2d")),heightSpect=canvasSpectElement.height,widthSpect=canvasSpectElement.width,dataArraySpect=new Uint8Array(8192);canvasSpect.fillStyle="rgb(255,255,255)",canvasSpect.lineWidth=1,canvasSpect.strokeStyle="rgb(0,0,0)";setInterval(()=>{source.getByteTimeDomainData(dataArrayOsc);var waveformArray=(size=>{var waveformSnapshot=new Uint8Array(size),greatestSlope=0,greatestSlopes=[];for(let i=size/2;i<dataArrayOsc.length-size/2;i++)atNode(dataArrayOsc[i])&&(Math.abs(dataArrayOsc[i+3]-dataArrayOsc[i-3])>greatestSlope?(greatestSlope=Math.abs(dataArrayOsc[i+3]-dataArrayOsc[i-3]),(greatestSlopes=[]).push(i)):Math.abs(dataArrayOsc[i+3]-dataArrayOsc[i-3])===greatestSlope&&greatestSlopes.push(i));if(0===greatestSlopes.length)for(let i=0;i<size;i++)waveformSnapshot[i]=dataArrayOsc[i];else{var middleIndex=greatestSlopes[Math.floor(greatestSlopes.length/2)],startIndex=middleIndex-size/2;if(0<dataArrayOsc[middleIndex]-dataArrayOsc[middleIndex+3])for(let i=0;i<size;i++)waveformSnapshot[i]=255-dataArrayOsc[i+startIndex];else for(let i=0;i<size;i++)waveformSnapshot[i]=dataArrayOsc[i+startIndex]}return waveformSnapshot})(2048),sliceWidth=(canvasOsc.fillRect(0,0,widthOsc,heightOsc),canvasOsc.beginPath(),+widthOsc/waveformArray.length);let x=0,y=heightOsc-heightOsc*waveformArray[0]/255;canvasOsc.moveTo(x,y);for(let i=0;i<waveformArray.length;i++)canvasOsc.lineTo(x,y),x+=sliceWidth,y=heightOsc-heightOsc*waveformArray[i]/255;canvasOsc.stroke()},32.25),setInterval(()=>{source.getByteFrequencyData(dataArraySpect);var spectArray=(()=>{let trimIndex=dataArraySpect.length-1;for(let i=dataArraySpect.length-1;0<=i;i--)if(0<dataArraySpect[i]){trimIndex=i;break}var spectrographSnapshot=new Uint8Array(trimIndex+1);for(let i=0;i<trimIndex;i++)spectrographSnapshot[i]=dataArraySpect[i];return spectrographSnapshot})(),sliceWidth=(canvasSpect.fillRect(0,0,widthSpect,heightSpect),canvasSpect.beginPath(),+widthSpect/spectArray.length);let x=0,y=heightSpect;canvasSpect.moveTo(x,y);for(let i=0;i<spectArray.length;i++)canvasSpect.lineTo(x,y),x+=sliceWidth,y=heightSpect-heightSpect*spectArray[i]/255;canvasSpect.lineTo(widthSpect,heightSpect),canvasSpect.stroke()},32.25)},registerInputElement=(element,event,listener)=>{element.addEventListener(event,listener)},documentInit=(keyboard,inputController,defaultPresets)=>{let populatePresetsDropdown=()=>{for(let i=0;i<loadPresetElement.options.length;i++)loadPresetElement.options[i].remove();for(let i=0;i<deletePresetElement.options.length;i++)deletePresetElement.options[i].remove();defaultPresets.forEach((value,key)=>{generatePresetOption(loadPresetElement,key)});for(let i=0;i<localStorage.length;i++)localStorage.key(i).includes(presetPrefix)&&(generatePresetOption(loadPresetElement,localStorage.key(i).replace(presetPrefix,"")),generatePresetOption(deletePresetElement,localStorage.key(i).replace(presetPrefix,"")));generatePresetOption(deletePresetElement,"")},generatePresetOption=(selectElement,name)=>{var optionElement;null===selectElement.querySelector(`option[value='${name}']`)&&((optionElement=document.createElement("option")).value=name,("Default"===(optionElement.text=name)&&"load-preset"===selectElement.name||""===name)&&(optionElement.selected=!0,""===name)&&optionElement.classList.add("hidden"),selectElement.appendChild(optionElement))},loadPreset=name=>{let preset;(null==(preset=null!=localStorage.getItem(""+presetPrefix+name)?JSON.parse(localStorage.getItem(""+presetPrefix+name)):JSON.parse(defaultPresets.get(name))).version||parseFloat(preset.version)<PRESET_VERSION)&&console.error(`Preset ${name} was created on an earlier version of this software, settings may not apply properly.
Preset version: ${preset.version} | Current version `+PRESET_VERSION),null!=preset.signalCapacity&&(voicesElement.value=preset.signalCapacity,setVoices(voicesElement.value)),null!=preset.oscA&&(null!=preset.oscA.waveType&&(document.querySelector(`input[name='wave-src-oscA'][value='${preset.oscA.waveType}']`).checked=!0),null!=preset.oscA.coarseDetune&&(oscACoarseDetuneElement.value=preset.oscA.coarseDetune),null!=preset.oscA.fineDetune&&(oscAFineDetuneElement.value=preset.oscA.fineDetune),null!=preset.oscA.amplitude)&&(oscAAmplitudeElement.value=preset.oscA.amplitude),null!=preset.oscB&&(null!=preset.oscB.waveType&&(document.querySelector(`input[name='wave-src-oscB'][value='${preset.oscB.waveType}']`).checked=!0),null!=preset.oscB.coarseDetune&&(oscBCoarseDetuneElement.value=preset.oscB.coarseDetune),null!=preset.oscB.fineDetune&&(oscBFineDetuneElement.value=preset.oscB.fineDetune),null!=preset.oscB.amplitude)&&(oscBAmplitudeElement.value=preset.oscB.amplitude),null!=preset.filterA&&(null!=preset.filterA.filterType&&(document.querySelector(`input[name='filterA'][value='${preset.filterA.filterType}']`).checked=!0),null!=preset.filterA.frequency&&(frequencyAElement.value=preset.filterA.frequency),null!=preset.filterA.envFrequency&&(envFrequencyAElement.value=preset.filterA.envFrequency),null!=preset.filterA.resonance)&&(resonanceAElement.value=preset.filterA.resonance),null!=preset.filterB&&(null!=preset.filterB.filterType&&(document.querySelector(`input[name='filterB'][value='${preset.filterB.filterType}']`).checked=!0),null!=preset.filterB.frequency&&(frequencyBElement.value=preset.filterB.frequency),null!=preset.filterB.envFrequency&&(envFrequencyBElement.value=preset.filterB.envFrequency),null!=preset.filterB.resonance)&&(resonanceBElement.value=preset.filterB.resonance),null!=preset.amplitudeEnv&&(null!=preset.amplitudeEnv.attack&&(ampAttackElement.value=preset.amplitudeEnv.attack),null!=preset.amplitudeEnv.decay&&(ampDecayElement.value=preset.amplitudeEnv.decay),null!=preset.amplitudeEnv.sustain&&(ampSustainElement.value=preset.amplitudeEnv.sustain),null!=preset.amplitudeEnv.release)&&(ampReleaseElement.value=preset.amplitudeEnv.release),null!=preset.filterEnv&&(null!=preset.filterEnv.attack&&(filterAttackElement.value=preset.filterEnv.attack),null!=preset.filterEnv.decay&&(filterDecayElement.value=preset.filterEnv.decay),null!=preset.filterEnv.sustain&&(filterSustainElement.value=preset.filterEnv.sustain),null!=preset.filterEnv.release)&&(filterReleaseElement.value=preset.filterEnv.release)},setVoices=value=>{voicesElement.parentElement.querySelector("label span").innerHTML=value},configureInputController=inputController=>{inputController.setSignalCapacity(parseInt(voicesElement.value));var checkedOscAWaveType=document.querySelector('input[name="wave-src-oscA"]:checked'),checkedOscBWaveType=document.querySelector('input[name="wave-src-oscB"]:checked'),checkedOscAWaveType=(inputController.setWaveTypeA(checkedOscAWaveType.value),inputController.setWaveTypeB(checkedOscBWaveType.value),inputController.setDetuneA(100*Number(oscACoarseDetuneElement.value)+Number(oscAFineDetuneElement.value)),inputController.setDetuneB(100*Number(oscBCoarseDetuneElement.value)+Number(oscBFineDetuneElement.value)),inputController.setAmplitudeA(parseFloat(oscAAmplitudeElement.value)),inputController.setAmplitudeB(parseFloat(oscBAmplitudeElement.value)),document.querySelector('input[name="filterA"]:checked')),checkedOscBWaveType=document.querySelector('input[name="filterB"]:checked');inputController.setFilterTypeA(checkedOscAWaveType.value),inputController.setFilterTypeB(checkedOscBWaveType.value),inputController.setFilterFrequencyA(Math.pow(2,parseFloat(frequencyAElement.value))),inputController.setFilterFrequencyB(Math.pow(2,parseFloat(frequencyBElement.value))),inputController.setFilterEnvFrequencyA(Math.pow(2,parseFloat(envFrequencyAElement.value))),inputController.setFilterEnvFrequencyB(Math.pow(2,parseFloat(envFrequencyBElement.value))),inputController.setFilterQA(parseFloat(resonanceAElement.value)),inputController.setFilterQB(parseInt(resonanceBElement.value)),inputController.setAmpEnvelope(ampAttackElement.name,parseInt(ampAttackElement.value)),inputController.setAmpEnvelope(ampDecayElement.name,parseInt(ampDecayElement.value)),inputController.setAmpEnvelope(ampSustainElement.name,parseInt(ampSustainElement.value)),inputController.setAmpEnvelope(ampReleaseElement.name,parseInt(ampReleaseElement.value)),inputController.setFilterEnvelope(filterAttackElement.name,parseInt(filterAttackElement.value)),inputController.setFilterEnvelope(filterDecayElement.name,parseInt(filterDecayElement.value)),inputController.setFilterEnvelope(filterSustainElement.name,parseInt(filterSustainElement.value)),inputController.setFilterEnvelope(filterReleaseElement.name,parseInt(filterReleaseElement.value))};let onHeaderClick=e=>{var sectionElement=document.getElementById(e.currentTarget.classList[1]);sectionElement.classList.contains("closed")?(sectionElement.classList.remove("closed"),e.currentTarget.classList.remove("closed")):(sectionElement.classList.add("closed"),e.currentTarget.classList.add("closed"))};let onOscAWaveInput=e=>{inputController.setWaveTypeA(e.currentTarget.value)};var onOscADetuneInput=e=>{inputController.setDetuneA(100*Number(oscACoarseDetuneElement.value)+Number(oscAFineDetuneElement.value))},onOscADetuneDblClickInput=e=>{e.target.value=0,inputController.setDetuneA(100*Number(oscACoarseDetuneElement.value)+Number(oscAFineDetuneElement.value))};let onOscBWaveInput=e=>{inputController.setWaveTypeB(e.currentTarget.value)};var onOscBDetuneInput=e=>{inputController.setDetuneB(100*Number(oscBCoarseDetuneElement.value)+Number(oscBFineDetuneElement.value))},onOscBDetuneDblClickInput=e=>{e.target.value=0,inputController.setDetuneB(100*Number(oscBCoarseDetuneElement.value)+Number(oscBFineDetuneElement.value))};let onFilterATypeInput=e=>{inputController.setFilterTypeA(e.currentTarget.value)};let onFilterBTypeInput=e=>{inputController.setFilterTypeB(e.currentTarget.value)};var onAmpEnvelopeInput=e=>{inputController.setAmpEnvelope(e.currentTarget.name,e.currentTarget.value)},onFilterEnvelopeInput=e=>{inputController.setFilterEnvelope(e.currentTarget.name,e.currentTarget.value)};let PRESET_VERSION=1.1,onTextInputFocus=(registerInputElement(document,"keydown",e=>{instructionsAsideElement.classList.contains("opened")&&"Escape"===e.code&&instructionsAsideElement.classList.remove("opened")}),e=>{keyboard.clearAllKeys()});document.querySelectorAll('input[type="text"]').forEach(textInputElement=>{registerInputElement(textInputElement,"focus",onTextInputFocus)});var instructionsButtonElement=document.querySelector('button[name="instructions"]');registerInputElement(instructionsButtonElement,"click",e=>{instructionsAsideElement.classList.contains("opened")?instructionsAsideElement.classList.remove("opened"):instructionsAsideElement.classList.add("opened")});let instructionsAsideElement=document.querySelector("aside.instructions");registerInputElement(instructionsAsideElement,"click",e=>{e.target.classList.contains("instructions")&&instructionsAsideElement.classList.contains("opened")&&instructionsAsideElement.classList.remove("opened")});document.querySelectorAll(".header-container").forEach(headerElement=>{registerInputElement(headerElement,"click",onHeaderClick)});instructionsButtonElement=document.querySelector('button[name="allow-audio"]'),registerInputElement(instructionsButtonElement,"click",e=>{"suspended"===inputController.context.state&&(console.log("Initializing Audio"),inputController.context.resume(),configureInputController(inputController),keyboard.init(inputController),oscilloscopeInit(oscilloscopeElement,spectrographElement,inputController.globalChain.get(1)))}),instructionsButtonElement=document.querySelector('input[name="master-volume"]');registerInputElement(instructionsButtonElement,"input",e=>{inputController.setMasterVolume(e.currentTarget.value)});let loadPresetElement=document.querySelector('select[name="load-preset"]');registerInputElement(loadPresetElement,"change",e=>{loadPreset(e.currentTarget.value),configureInputController(inputController)});instructionsButtonElement=document.querySelector('button[name="save-preset"]');registerInputElement(instructionsButtonElement,"click",e=>{var checkedWaveTypeB,checkedFilterTypeA,checkedFilterTypeB,checkedWaveTypeA;""===savePresetNameElement.value?(savePresetNameElement.required=!0,alert("Please enter a name for your preset")):(savePresetNameElement.required=!1,checkedWaveTypeA=document.querySelector("input[name='wave-src-oscA']:checked"),checkedWaveTypeB=document.querySelector("input[name='wave-src-oscB']:checked"),checkedFilterTypeA=document.querySelector("input[name='filterA']:checked"),checkedFilterTypeB=document.querySelector("input[name='filterB']:checked"),checkedWaveTypeA={name:savePresetNameElement.value,version:PRESET_VERSION,signalCapacity:voicesElement.value,oscA:{waveType:checkedWaveTypeA.value,coarseDetune:parseInt(oscACoarseDetuneElement.value),fineDetune:parseInt(oscAFineDetuneElement.value),amplitude:parseFloat(oscAAmplitudeElement.value)},oscB:{waveType:checkedWaveTypeB.value,coarseDetune:parseInt(oscBCoarseDetuneElement.value),fineDetune:parseInt(oscBFineDetuneElement.value),amplitude:parseFloat(oscBAmplitudeElement.value)},filterA:{filterType:checkedFilterTypeA.value,frequency:parseFloat(frequencyAElement.value),envFrequency:parseFloat(envFrequencyAElement.value),resonance:parseInt(resonanceAElement.value)},filterB:{filterType:checkedFilterTypeB.value,frequency:parseFloat(frequencyBElement.value),envFrequency:parseFloat(envFrequencyBElement.value),resonance:parseInt(resonanceBElement.value)},amplitudeEnv:{attack:parseInt(ampAttackElement.value),decay:parseInt(ampDecayElement.value),sustain:parseInt(ampSustainElement.value),release:parseInt(ampReleaseElement.value)},filterEnv:{attack:parseInt(filterAttackElement.value),decay:parseInt(filterDecayElement.value),sustain:parseInt(filterSustainElement.value),release:parseInt(filterReleaseElement.value)}},localStorage.setItem(""+presetPrefix+savePresetNameElement.value,JSON.stringify(checkedWaveTypeA)),populatePresetsDropdown(),savePresetNameElement.value="")});let savePresetNameElement=document.querySelector('input[name="save-preset-name"]'),deletePresetElement=document.querySelector('select[name="delete-preset"]');instructionsButtonElement=document.querySelector('button[name="delete-preset"]'),registerInputElement(instructionsButtonElement,"click",e=>{confirm("Are you sure you want to delete "+deletePresetElement.value+"?")&&(localStorage.removeItem(""+presetPrefix+deletePresetElement.value),populatePresetsDropdown())}),instructionsButtonElement=document.getElementById("keyboard"),registerInputElement(instructionsButtonElement,"change",e=>{}),instructionsButtonElement=document.getElementById("midi");registerInputElement(instructionsButtonElement,"change",e=>{});let voicesElement=document.querySelector('input[name="voices"]'),oscACoarseDetuneElement=(registerInputElement(voicesElement,"input",e=>{setVoices(e.currentTarget.value),configureInputController(inputController)}),document.querySelectorAll('input[name="wave-src-oscA"]').forEach(oscAWaveTypeElement=>{registerInputElement(oscAWaveTypeElement,"input",onOscAWaveInput)}),document.querySelector('input[name="coarse-detune-oscA"]')),oscAFineDetuneElement=(registerInputElement(oscACoarseDetuneElement,"input",onOscADetuneInput),document.querySelector('input[name="fine-detune-oscA"]')),oscAAmplitudeElement=(registerInputElement(oscAFineDetuneElement,"input",onOscADetuneInput),registerInputElement(oscACoarseDetuneElement,"dblclick",onOscADetuneDblClickInput),registerInputElement(oscAFineDetuneElement,"dblclick",onOscADetuneDblClickInput),document.querySelector('input[name="amplitude-oscA"]')),oscBCoarseDetuneElement=(registerInputElement(oscAAmplitudeElement,"input",e=>{inputController.setAmplitudeA(e.currentTarget.value)}),document.querySelectorAll('input[name="wave-src-oscB"]').forEach(oscBWaveTypeElement=>{registerInputElement(oscBWaveTypeElement,"input",onOscBWaveInput)}),document.querySelector('input[name="coarse-detune-oscB"]')),oscBFineDetuneElement=(registerInputElement(oscBCoarseDetuneElement,"input",onOscBDetuneInput),document.querySelector('input[name="fine-detune-oscB"]')),oscBAmplitudeElement=(registerInputElement(oscBFineDetuneElement,"input",onOscBDetuneInput),registerInputElement(oscBCoarseDetuneElement,"dblclick",onOscBDetuneDblClickInput),registerInputElement(oscBFineDetuneElement,"dblclick",onOscBDetuneDblClickInput),document.querySelector('input[name="amplitude-oscB"]')),frequencyAElement=(registerInputElement(oscBAmplitudeElement,"input",e=>{inputController.setAmplitudeB(e.currentTarget.value)}),document.querySelectorAll('input[name="filterA"]').forEach(filterATypeElement=>{registerInputElement(filterATypeElement,"input",onFilterATypeInput)}),document.querySelector('input[name="frequencyA"]')),envFrequencyAElement=(registerInputElement(frequencyAElement,"input",e=>{inputController.setFilterFrequencyA(Math.pow(2,parseFloat(e.currentTarget.value)))}),document.querySelector('input[name="env-frequencyA"]')),resonanceAElement=(registerInputElement(envFrequencyAElement,"input",e=>{inputController.setFilterEnvFrequencyA(Math.pow(2,parseFloat(e.currentTarget.value)))}),document.querySelector('input[name="resonanceA"]')),frequencyBElement=(registerInputElement(resonanceAElement,"input",e=>{inputController.setFilterQA(parseFloat(e.currentTarget.value))}),document.querySelectorAll('input[name="filterB"]').forEach(filterBTypeElement=>{registerInputElement(filterBTypeElement,"input",onFilterBTypeInput)}),document.querySelector('input[name="frequencyB"]')),envFrequencyBElement=(registerInputElement(frequencyBElement,"input",e=>{inputController.setFilterFrequencyB(Math.pow(2,parseFloat(e.currentTarget.value)))}),document.querySelector('input[name="env-frequencyB"]')),resonanceBElement=(registerInputElement(envFrequencyBElement,"input",e=>{inputController.setFilterEnvFrequencyB(Math.pow(2,parseFloat(e.currentTarget.value)))}),document.querySelector('input[name="resonanceB"]')),ampAttackElement=(registerInputElement(resonanceBElement,"input",e=>{inputController.setFilterQB(parseFloat(e.currentTarget.value))}),document.querySelector('input[name="amp-attack-input"]')),ampDecayElement=(registerInputElement(ampAttackElement,"input",onAmpEnvelopeInput),document.querySelector('input[name="amp-decay-input"]')),ampSustainElement=(registerInputElement(ampDecayElement,"input",onAmpEnvelopeInput),document.querySelector('input[name="amp-sustain-input"]')),ampReleaseElement=(registerInputElement(ampSustainElement,"input",onAmpEnvelopeInput),document.querySelector('input[name="amp-release-input"]')),filterAttackElement=(registerInputElement(ampReleaseElement,"input",onAmpEnvelopeInput),document.querySelector('input[name="filter-attack-input"]')),filterDecayElement=(registerInputElement(filterAttackElement,"input",onFilterEnvelopeInput),document.querySelector('input[name="filter-decay-input"]')),filterSustainElement=(registerInputElement(filterDecayElement,"input",onFilterEnvelopeInput),document.querySelector('input[name="filter-sustain-input"]')),filterReleaseElement=(registerInputElement(filterSustainElement,"input",onFilterEnvelopeInput),document.querySelector('input[name="filter-release-input"]')),oscilloscopeElement=(registerInputElement(filterReleaseElement,"input",onFilterEnvelopeInput),document.getElementById("oscilloscope")),spectrographElement=document.getElementById("spectrograph"),clearKeybindError=()=>{errorElement.classList.contains("hidden")||errorElement.classList.add("hidden")},resetKeybindToSavedBinding=input=>{input.hasAttribute("data-value")?input.value=input.getAttribute("data-value"):(input.value="",input.classList.contains("unused")||input.closest(".key").classList.add("unused"),input.closest(".key").classList.remove("note-accidental"),input.closest(".key").classList.remove("note-natural"))},onKeymapInputKeydown=e=>{var value,input,keyElement;"Enter"===e.code&&(value=e.currentTarget.value.toUpperCase(),inputController.tuningSystem.has(value)?(((input,value)=>{input.setAttribute("data-value",value);var keyElement=input.closest(".key");keyboard.setKeyBinding(keyElement.dataset.key,value),localStorage.setItem(""+keybindPrefix+keyElement.dataset.key,value),input.blur(),keyElement.classList.remove("unused"),value.includes("#")?(keyElement.classList.remove("note-natural"),keyElement.classList.add("note-accidental")):(keyElement.classList.remove("note-accidental"),keyElement.classList.add("note-natural"))})(e.currentTarget,value),clearKeybindError()):""===value?(input=e.currentTarget,keyElement=input.closest(".key"),keyboard.clearKeyBinding(keyElement.dataset.key),localStorage.removeItem(""+keybindPrefix+keyElement.dataset.key),input.removeAttribute("data-value"),keyElement.classList.add("unused"),keyElement.classList.remove("note-accidental"),keyElement.classList.remove("note-natural"),input.blur(),clearKeybindError()):(e.currentTarget.classList.add("invalid"),(value=>{errorElement.innerHTML=value+" is not a valid note name. Please use standard note names with octave numbers as such A0, A#0, B0, C1, ... , A#7, B7, C8. Flats are not recognized.",errorElement.classList.remove("hidden")})(value),resetKeybindToSavedBinding(e.currentTarget)))},onKeymapInputBlur=e=>{e.currentTarget.classList.contains("invalid")&&(e.currentTarget.classList.remove("invalid"),clearKeybindError()),resetKeybindToSavedBinding(e.currentTarget)},errorElement=document.getElementById("invalid-key-error"),keybindPrefix=(document.querySelectorAll(".key input").forEach(keymapElement=>{registerInputElement(keymapElement,"keydown",onKeymapInputKeydown),registerInputElement(keymapElement,"blur",onKeymapInputBlur)}),"KB_"),presetPrefix="PR_";populatePresetsDropdown(),loadPreset("Default"),"true"!==localStorage.getItem(keybindPrefix+"storage")&&(localStorage.setItem(keybindPrefix+"storage","true"),keyboard.getBindingMap().forEach((value,key)=>{localStorage.setItem(""+keybindPrefix+key,value)})),keyboard.getBindingMap().clear(),document.querySelectorAll("div[data-key]").forEach(key=>{var code=key.dataset.key,binding=localStorage.getItem(""+keybindPrefix+code);binding&&(key.classList.remove("unused"),binding.includes("#")?key.classList.add("note-accidental"):key.classList.add("note-natural"),key.querySelector("input").value=binding,key.querySelector("input").dataset.value=binding,keyboard.setKeyBinding(code,binding))}),window.addEventListener("blur",e=>{keyboard.clearAllKeys()})};class Envelope{constructor(_a,_d,_s,_r){this.attack=_a,this.decay=_d,this.sustain=_s,this.release=_r}}class NodeChain{constructor(nodes){this.nodes=nodes,this.size=nodes.length;for(var i=0;i<nodes.length-1;i++)this.nodes[i].connect(this.nodes[i+1])}get(index){return this.nodes[index]}first(){return this.nodes[0]}last(){return this.nodes[this.size-1]}connect(destination){this.last().connect(destination)}}class LinkedNode{constructor(_item,_next){this.item=_item,this.next=_next,this.prev=null}}class LinkedQueue{constructor(){this.size=0,this.first=null,this.last=null}getSize(){return this.size}isEmpty(){return 0==this.size}push(item){var node;this.isEmpty()?(node=new LinkedNode(item,null),this.first=node):(node=new LinkedNode(item,this.last),this.last.prev=node),this.last=node,this.size++}pop(){var node;return this.isEmpty()?null:(node=this.first,this.first=node.prev,this.first?(this.first.next=null,node.prev=null):this.last=null,this.size--,node.item)}peakFirst(){return this.first?this.first.item:null}peakLast(){return this.last?this.last.item:null}remove(item){if(this.isEmpty())return null;{let node=this.last;if(1==this.size)return this.last=null,this.first=null,this.size=0,node.item;for(;node;){if(node.item==item)return node.prev&&node.next?(node.prev.next=node.next,node.next.prev=node.prev,node.next=null,node.prev=null):node.prev?(this.first=node.prev,this.first.next=null,node.prev=null):(this.last=node.next,this.last.prev=null,node.next=null),this.size--,node.item;node=node.next}}}forEach(callback){let node=this.last;for(;node;)callback(node.item),node=node.next}toString(){let collectionString=`n = ${this.size} | null <-> `,node=this.last;for(;node;)collectionString+=`{${node.item.toString()}} <-> `,node=node.next;return collectionString+=`null | first=${this.first?this.first.item.toString():"null"} last=`+(this.last?this.last.item.toString():"null")}}class SignalQueue extends LinkedQueue{constructor(_capacity){super(),this.capacity=_capacity}getCapacity(){return this.capacity}isFull(){return this.size==this.capacity}has(freq){let node=this.last;for(;node;){if(node.item.getFrequency()==freq)return!0;node=node.next}return!1}push(signal){this.isFull()||super.push(signal)}removeFrequency(baseFrequency){if(this.isEmpty())return null;{let node=this.last;if(1==this.size)return this.last=null,this.first=null,this.size=0,node.item;for(;node;){if(node.item.getFrequency()==baseFrequency)return node.prev&&node.next?(node.prev.next=node.next,node.next.prev=node.prev,node.next=null,node.prev=null):node.prev?(this.first=node.prev,this.first.next=null,node.prev=null):(this.last=node.next,this.last.prev=null,node.next=null),this.size--,node.item;node=node.next}}}}class Filter extends NodeChain{constructor(context){super([context.createBiquadFilter()]),this.node=this.first(),this.frequency=1,this.node.frequency.value=1,this.envFrequency=1}destroy(){this.node.disconnect(),this.node=null}getType(){return this.type}setType(type){this.type=type,this.node.type=type}getFrequency(){return this.frequency}getFrequencyParam(){return this.node.frequency}setFrequency(freq){this.frequency=freq,this.node.frequency.value=freq}getEnvFrequency(){return this.envFrequency}setEnvFrequency(freq){this.envFrequency=freq}getQ(){return this.q}setQ(q){this.node.type.includes("shelf")?(this.gain=q-10,this.node.gain.value=q-10):(this.q=q,this.node.Q.value=q)}getGain(){return this.gain}}class Oscillator extends NodeChain{constructor(context){super([context.createOscillator(),context.createGain()]),this.sourceNode=this.nodes[0],this.gainNode=this.nodes[1],this.detune=0,this.gainNode.gain.value=1,this.sourceNode.start()}destroy(){this.sourceNode.stop(),this.sourceNode.disconnect(),this.gainNode.disconnect(),this.gainNode=null,this.sourceNode=null}first(){return this.sourceNode}last(){return this.gainNode}setWaveform(waveform){this.waveform=waveform,this.sourceNode.type=waveform}getGain(){return this.gainNode.gain.value}getGainParam(){return this.gainNode.gain}getFrequencyParam(){return this.sourceNode.frequency}setGain(gain){this.gainNode.gain.value=gain}setFrequency(freq){this.sourceNode.frequency.value=freq}setDetune(detune){this.detune=detune,this.sourceNode.detune.value=detune}}class Signal{constructor(context){this.baseFrequency=0,this.oscillatorA=new Oscillator(context),this.oscillatorB=new Oscillator(context),this.filterA=new Filter(context),this.filterB=new Filter(context),this.signalGain=context.createGain(),this.oscillatorA.connect(this.filterA.first()),this.oscillatorB.connect(this.filterB.first()),this.oscillatorA.setGain(1),this.oscillatorB.setGain(1),this.filterA.connect(this.signalGain),this.filterB.connect(this.signalGain),this.context=context,this.signalGain.gain.value=0}destroy(){this.oscillatorA.destroy(),this.oscillatorB.destroy(),this.filterA.destroy(),this.filterB.destroy(),this.signalGain.disconnect(),this.signalGain=null}getOscillatorA(){return this.oscillatorA}getOscillatorB(){return this.oscillatorB}getFilterA(){return this.filterA}getFilterB(){return this.filterB}getFrequency(){return this.baseFrequency}start(baseFrequency,ampEnvelope,filterEnvelope){this.baseFrequency=baseFrequency;var startTime=this.context.currentTime,baseFrequency=(this.oscillatorA.setFrequency(baseFrequency),this.oscillatorB.setFrequency(baseFrequency),this.signalGain.gain);baseFrequency.cancelScheduledValues(startTime),baseFrequency.setValueAtTime(baseFrequency.value,startTime),baseFrequency.linearRampToValueAtTime(1,startTime+ampEnvelope.attack),baseFrequency.exponentialRampToValueAtTime(+ampEnvelope.sustain+.01,startTime+ampEnvelope.attack+ampEnvelope.decay),baseFrequency.linearRampToValueAtTime(+ampEnvelope.sustain,startTime+ampEnvelope.attack+ampEnvelope.decay);let frequencyParam=this.filterA.getFrequencyParam();baseFrequency=this.filterA.getFrequency()+(this.filterA.getEnvFrequency()-this.filterA.getFrequency())*filterEnvelope.sustain;frequencyParam.cancelScheduledValues(startTime),frequencyParam.setValueAtTime(frequencyParam.value,startTime),frequencyParam.linearRampToValueAtTime(this.filterA.getEnvFrequency(),startTime+filterEnvelope.attack),frequencyParam.exponentialRampToValueAtTime(baseFrequency,startTime+filterEnvelope.attack+filterEnvelope.decay),frequencyParam=this.filterB.getFrequencyParam(),baseFrequency=this.filterB.getFrequency()+(this.filterB.getEnvFrequency()-this.filterB.getFrequency())*filterEnvelope.sustain,frequencyParam.cancelScheduledValues(startTime),frequencyParam.setValueAtTime(frequencyParam.value,startTime),frequencyParam.linearRampToValueAtTime(this.filterB.getEnvFrequency(),startTime+filterEnvelope.attack),frequencyParam.exponentialRampToValueAtTime(baseFrequency,startTime+filterEnvelope.attack+filterEnvelope.decay)}move(baseFrequency,ampEnvelope,filterEnvelope){this.baseFrequency=baseFrequency;var startTime=this.context.currentTime,gainParam=this.signalGain.gain,frequencyParamA=this.oscillatorA.getFrequencyParam(),frequencyParamB=this.oscillatorB.getFrequencyParam();frequencyParamA.cancelScheduledValues(startTime),frequencyParamA.setValueAtTime(baseFrequency,startTime),frequencyParamB.cancelScheduledValues(startTime),frequencyParamB.setValueAtTime(baseFrequency,startTime),0==ampEnvelope.sustain&&(gainParam.cancelScheduledValues(startTime),gainParam.setValueAtTime(gainParam.value,startTime),gainParam.linearRampToValueAtTime(1,startTime+ampEnvelope.attack),gainParam.exponentialRampToValueAtTime(+ampEnvelope.sustain+.01,startTime+ampEnvelope.attack+ampEnvelope.decay),gainParam.linearRampToValueAtTime(+ampEnvelope.sustain,startTime+ampEnvelope.attack+ampEnvelope.decay))}stop(ampEnvelope,filterEnvelope){var gainParam=this.signalGain.gain,startTime=this.context.currentTime;gainParam.cancelScheduledValues(startTime),gainParam.setValueAtTime(gainParam.value,startTime),gainParam.exponentialRampToValueAtTime(.01,startTime+ampEnvelope.release),gainParam.linearRampToValueAtTime(0,startTime+ampEnvelope.release);let frequencyParam=this.filterA.getFrequencyParam();frequencyParam.cancelScheduledValues(startTime),frequencyParam.setValueAtTime(frequencyParam.value,startTime),frequencyParam.exponentialRampToValueAtTime(this.filterA.getFrequency(),startTime+filterEnvelope.release),(frequencyParam=this.filterB.getFrequencyParam()).cancelScheduledValues(startTime),frequencyParam.setValueAtTime(frequencyParam.value,startTime),frequencyParam.exponentialRampToValueAtTime(this.filterB.getFrequency(),startTime+filterEnvelope.release)}connect(destination){this.signalGain.connect(destination)}toString(){return this.baseFrequency}}var keyToNoteMap=new Map,noteToFrequencyMap=(keyToNoteMap.set("KeyZ","C2"),keyToNoteMap.set("KeyS","C#2"),keyToNoteMap.set("KeyX","D2"),keyToNoteMap.set("KeyD","D#2"),keyToNoteMap.set("KeyC","E2"),keyToNoteMap.set("KeyV","F2"),keyToNoteMap.set("KeyG","F#2"),keyToNoteMap.set("KeyB","G2"),keyToNoteMap.set("KeyH","G#2"),keyToNoteMap.set("KeyN","A2"),keyToNoteMap.set("KeyJ","A#2"),keyToNoteMap.set("KeyM","B2"),keyToNoteMap.set("Comma","C3"),keyToNoteMap.set("KeyL","C#3"),keyToNoteMap.set("Period","D3"),keyToNoteMap.set("Semicolon","D#3"),keyToNoteMap.set("Slash","E3"),keyToNoteMap.set("KeyQ","F3"),keyToNoteMap.set("Digit2","F#3"),keyToNoteMap.set("KeyW","G3"),keyToNoteMap.set("Digit3","G#3"),keyToNoteMap.set("KeyE","A3"),keyToNoteMap.set("Digit4","A#3"),keyToNoteMap.set("KeyR","B3"),keyToNoteMap.set("KeyT","C4"),keyToNoteMap.set("Digit6","C#4"),keyToNoteMap.set("KeyY","D4"),keyToNoteMap.set("Digit7","D#4"),keyToNoteMap.set("KeyU","E4"),keyToNoteMap.set("KeyI","F4"),keyToNoteMap.set("Digit9","F#4"),keyToNoteMap.set("KeyO","G4"),keyToNoteMap.set("Digit0","G#4"),keyToNoteMap.set("KeyP","A4"),keyToNoteMap.set("Minus","A#4"),keyToNoteMap.set("BracketLeft","B4"),keyToNoteMap.set("BracketRight","C5"),new Map);noteToFrequencyMap.set("A0",27.5),noteToFrequencyMap.set("A#0",29.14),noteToFrequencyMap.set("B0",30.87),noteToFrequencyMap.set("C1",32.7),noteToFrequencyMap.set("C#1",34.65),noteToFrequencyMap.set("D1",36.71),noteToFrequencyMap.set("D#1",38.89),noteToFrequencyMap.set("E1",41.2),noteToFrequencyMap.set("F1",43.65),noteToFrequencyMap.set("F#1",46.25),noteToFrequencyMap.set("G1",49),noteToFrequencyMap.set("G#1",51.91),noteToFrequencyMap.set("A1",55),noteToFrequencyMap.set("A#1",58.27),noteToFrequencyMap.set("B1",61.74),noteToFrequencyMap.set("C2",65.41),noteToFrequencyMap.set("C#2",69.3),noteToFrequencyMap.set("D2",73.42),noteToFrequencyMap.set("D#2",77.78),noteToFrequencyMap.set("E2",82.41),noteToFrequencyMap.set("F2",87.31),noteToFrequencyMap.set("F#2",92.5),noteToFrequencyMap.set("G2",98),noteToFrequencyMap.set("G#2",103.83),noteToFrequencyMap.set("A2",110),noteToFrequencyMap.set("A#2",116.54),noteToFrequencyMap.set("B2",123.47),noteToFrequencyMap.set("C3",130.81),noteToFrequencyMap.set("C#3",138.59),noteToFrequencyMap.set("D3",146.83),noteToFrequencyMap.set("D#3",155.56),noteToFrequencyMap.set("E3",164.81),noteToFrequencyMap.set("F3",174.61),noteToFrequencyMap.set("F#3",185),noteToFrequencyMap.set("G3",196),noteToFrequencyMap.set("G#3",207.65),noteToFrequencyMap.set("A3",220),noteToFrequencyMap.set("A#3",233.08),noteToFrequencyMap.set("B3",246.94),noteToFrequencyMap.set("C4",261.63),noteToFrequencyMap.set("C#4",277.18),noteToFrequencyMap.set("D4",293.66),noteToFrequencyMap.set("D#4",311.13),noteToFrequencyMap.set("E4",329.63),noteToFrequencyMap.set("F4",349.23),noteToFrequencyMap.set("F#4",369.99),noteToFrequencyMap.set("G4",392),noteToFrequencyMap.set("G#4",415.3),noteToFrequencyMap.set("A4",440),noteToFrequencyMap.set("A#4",466.16),noteToFrequencyMap.set("B4",493.88),noteToFrequencyMap.set("C5",523.25),noteToFrequencyMap.set("C#5",554.37),noteToFrequencyMap.set("D5",587.33),noteToFrequencyMap.set("D#5",622.25),noteToFrequencyMap.set("E5",659.26),noteToFrequencyMap.set("F5",698.46),noteToFrequencyMap.set("F#5",739.99),noteToFrequencyMap.set("G5",783.99),noteToFrequencyMap.set("G#5",830.61),noteToFrequencyMap.set("A5",880),noteToFrequencyMap.set("A#5",932.33),noteToFrequencyMap.set("B5",987.77),noteToFrequencyMap.set("C6",1046.5),noteToFrequencyMap.set("C#6",1108.73),noteToFrequencyMap.set("D6",1174.66),noteToFrequencyMap.set("D#6",1244.51),noteToFrequencyMap.set("E6",1318.51),noteToFrequencyMap.set("F6",1396.91),noteToFrequencyMap.set("F#6",1479.98),noteToFrequencyMap.set("G6",1567.98),noteToFrequencyMap.set("G#6",1661.22),noteToFrequencyMap.set("A6",1760),noteToFrequencyMap.set("A#6",1864.66),noteToFrequencyMap.set("B6",1975.53),noteToFrequencyMap.set("C7",2093),noteToFrequencyMap.set("C#7",2217.46),noteToFrequencyMap.set("D7",2349.32),noteToFrequencyMap.set("D#7",2489.02),noteToFrequencyMap.set("E7",2637.02),noteToFrequencyMap.set("F7",2793.83),noteToFrequencyMap.set("F#7",2959.96),noteToFrequencyMap.set("G7",3135.96),noteToFrequencyMap.set("G#7",3322.44),noteToFrequencyMap.set("A7",3520),noteToFrequencyMap.set("A#7",3729.31),noteToFrequencyMap.set("B7",3951.07),noteToFrequencyMap.set("C8",4186.01);let keyboard=new class{constructor(bindingMap){this.pressedKeys=new Set,this.bindingMap=bindingMap}init(inputController){document.addEventListener("keydown",e=>{this.pressedKeys.has(e.code)||(this.pressedKeys.add(e.code),this.bindingMap.has(e.code)&&"text"!==document.activeElement.type&&(e.stopPropagation(),e.preventDefault(),inputController.startSignal(this.bindingMap.get(e.code))))}),document.addEventListener("keyup",e=>{this.pressedKeys.delete(e.code),this.bindingMap.has(e.code)&&("text"!==document.activeElement.type&&(e.stopPropagation(),e.preventDefault()),inputController.stopSignal(this.bindingMap.get(e.code)))})}setKeyBinding(keyCode,noteName){this.bindingMap.set(keyCode,noteName)}clearKeyBinding(keyCode){this.bindingMap.delete(keyCode)}clearAllKeys(){this.pressedKeys.forEach(key=>{document.dispatchEvent(new KeyboardEvent("keyup",{code:key}))}),this.pressedKeys.clear()}getBindingMap(){return this.bindingMap}}(keyToNoteMap),inputController=new class{constructor(tuningSystem){this.octaveOffset=0,this.isMonophonic=!1,this.context=new AudioContext,this.context.suspend(),this.ampEnvelope=new Envelope(1,1,1,.05),this.filterEnvelope=new Envelope(1,1,1,.05),this.globalChain=new NodeChain([this.context.createGain(),this.context.createAnalyser(),this.context.createGain(),this.context.createGain()]),this.tuningSystem=tuningSystem,this.globalChain.last().connect(this.context.destination);var tuningSystem=this.globalChain.first(),gateGain=this.globalChain.get(2),volumeGain=this.globalChain.last();tuningSystem.gain.value=.2,gateGain.gain.value=.2,volumeGain.gain.value=.5,this.signalCapacity=8,this.createSignals(),this.heldInputs=new LinkedQueue}startSignal(name){if(this.tuningSystem.has(name)){name=this.tuningSystem.get(name);if(this.heldInputs.push(name),this.availableSignals.isEmpty()){let signal=this.activeSignals.pop();signal.move(name,this.ampEnvelope,this.filterEnvelope),this.activeSignals.push(signal)}else{var signal=this.availableSignals.pop();signal.start(name,this.ampEnvelope,this.filterEnvelope),this.activeSignals.push(signal)}}}stopSignal(name){if(this.tuningSystem.has(name)){name=this.tuningSystem.get(name);if(this.heldInputs.remove(name),!this.activeSignals.isEmpty()){let signal=this.activeSignals.removeFrequency(name);if(signal)if(this.heldInputs.getSize()>this.activeSignals.getSize()){let found=!1;this.heldInputs.forEach(item=>{this.activeSignals.has(item)||found||(signal.move(item,this.ampEnvelope,this.filterEnvelope),this.activeSignals.push(signal),found=!0)})}else signal.stop(this.ampEnvelope,this.filterEnvelope),this.availableSignals.push(signal)}}}get latency(){return this.context.baseLatency+this.context.outputLatency}createSignals(){this.activeSignals=new SignalQueue(this.signalCapacity),this.availableSignals=new LinkedQueue;for(let i=0;i<this.signalCapacity;i++){var signal=new Signal(this.context);signal.connect(this.globalChain.first()),this.availableSignals.push(signal)}}clearAllSignals(){this.activeSignals.forEach(signal=>{signal.destroy()}),this.availableSignals.forEach(signal=>{signal.destroy()}),this.activeSignals=null,this.availableSignals=null}stopAllSignals(){for(;this.activeSignals.peakFirst();){var signal=this.activeSignals.pop();signal.stop(this.ampEnvelope,this.filterEnvelope),this.availableSignals.push(signal)}}setWaveTypeA(type){this.activeSignals.forEach(signal=>{signal.getOscillatorA().setWaveform(type)}),this.availableSignals.forEach(signal=>{signal.getOscillatorA().setWaveform(type)})}setWaveTypeB(type){this.activeSignals.forEach(signal=>{signal.getOscillatorB().setWaveform(type)}),this.availableSignals.forEach(signal=>{signal.getOscillatorB().setWaveform(type)})}setAmplitudeA(value){this.activeSignals.forEach(signal=>{signal.getOscillatorA().setGain(value)}),this.availableSignals.forEach(signal=>{signal.getOscillatorA().setGain(value)})}setAmplitudeB(value){this.activeSignals.forEach(signal=>{signal.getOscillatorB().setGain(value)}),this.availableSignals.forEach(signal=>{signal.getOscillatorB().setGain(value)})}setDetuneA(value){this.activeSignals.forEach(signal=>{signal.getOscillatorA().setDetune(value)}),this.availableSignals.forEach(signal=>{signal.getOscillatorA().setDetune(value)})}setDetuneB(value){this.activeSignals.forEach(signal=>{signal.getOscillatorB().setDetune(value)}),this.availableSignals.forEach(signal=>{signal.getOscillatorB().setDetune(value)})}setFilterTypeA(type){this.activeSignals.forEach(signal=>{signal.getFilterA().setType(type)}),this.availableSignals.forEach(signal=>{signal.getFilterA().setType(type)})}setFilterFrequencyA(freq){this.activeSignals.forEach(signal=>{signal.getFilterA().setFrequency(freq)}),this.availableSignals.forEach(signal=>{signal.getFilterA().setFrequency(freq)})}setFilterEnvFrequencyA(freq){this.activeSignals.forEach(signal=>{signal.getFilterA().setEnvFrequency(freq)}),this.availableSignals.forEach(signal=>{signal.getFilterA().setEnvFrequency(freq)})}setFilterQA(q){this.activeSignals.forEach(signal=>{signal.getFilterA().setQ(q)}),this.availableSignals.forEach(signal=>{signal.getFilterA().setQ(q)})}setFilterTypeB(type){this.activeSignals.forEach(signal=>{signal.getFilterB().setType(type)}),this.availableSignals.forEach(signal=>{signal.getFilterB().setType(type)})}setFilterFrequencyB(freq){this.activeSignals.forEach(signal=>{signal.getFilterB().setFrequency(freq)}),this.availableSignals.forEach(signal=>{signal.getFilterB().setFrequency(freq)})}setFilterEnvFrequencyB(freq){this.activeSignals.forEach(signal=>{signal.getFilterB().setEnvFrequency(freq)}),this.availableSignals.forEach(signal=>{signal.getFilterB().setEnvFrequency(freq)})}setFilterQB(q){this.activeSignals.forEach(signal=>{signal.getFilterB().setQ(q)}),this.availableSignals.forEach(signal=>{signal.getFilterB().setQ(q)})}setSignalCapacity(capacity){this.signalCapacity!=capacity&&(this.clearAllSignals(),this.signalCapacity=capacity,this.createSignals())}setMasterVolume(value){this.globalChain.last().gain.value=value/100}setAmpEnvelope(name,value){switch(name){case"amp-attack-input":this.ampEnvelope.attack=value/100;break;case"amp-decay-input":this.ampEnvelope.decay=value/25;break;case"amp-sustain-input":this.ampEnvelope.sustain=value/100;break;case"amp-release-input":this.ampEnvelope.release=value/25}}setFilterEnvelope(name,value){switch(name){case"filter-attack-input":this.filterEnvelope.attack=value/100;break;case"filter-decay-input":this.filterEnvelope.decay=value/25;break;case"filter-sustain-input":this.filterEnvelope.sustain=value/100;break;case"filter-release-input":this.filterEnvelope.release=value/25}}}(noteToFrequencyMap),defaultPresets=new Map;document.addEventListener("DOMContentLoaded",()=>{(async()=>{var presets=[],response=await fetch("./assets/defaultpresets/default.json"),jsonData=await response.json();return presets[0]=jsonData,jsonData=await(response=await fetch("./assets/defaultpresets/string.json")).json(),presets[1]=jsonData,presets})().then(data=>{data.forEach(item=>defaultPresets.set(item.name,JSON.stringify(item))),documentInit(keyboard,inputController,defaultPresets)})})})();